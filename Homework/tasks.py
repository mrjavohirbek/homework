"""
===================1===========
Дан список lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20]. 
Необходимо вывести элементы, которые одновременно 1) меньше 30 и 2) делятся на 3 без остатка. 
Все остальные элементы списка необходимо просуммировать и вывести конечный результат.
"""

# from ast import arg
# from calendar import month
# from xml.dom import ValidationErr


# lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20]

# ======================
# lst1 = [i for i in lst if i < 30 and i % 3 == 0]
# lst2 = [i for i in lst if i not in lst1]
# print(sum(lst2))
# print(lst1)

# ============
# lst1 = []
# lst2 = []

# for i in lst:
#     if i < 30 and i % 3 == 0:
#         lst1.append(i)
#     else:
#         lst2.append(i)
# print(lst1)
# print(sum(lst2))

"""
#2
Напишите функцию to_dict(lst), которая принимает аргумент в виде списка и возвращает словарь, в 
котором каждый элемент списка является и ключом и значением. Предполагается, что элементы списка 
будут соответствовать правилам задания ключей в словарях.
"""

# def to_dict(lst):
#     dict = {}
#     for i in lst:
#         dict[i] = i
#     return dict

# print(to_dict([1,2,3,4,5,6,7,8,9,10]))

"""
#3
Иван решил создать самый большой словарь в мире. Для этого он придумал функцию biggest_dict(**kwargs), которая принимает неограниченное количество параметров «ключ: значение» и обновляет созданный им словарь 
my_dict, состоящий всего из одного элемента «first_one» со значением «we can do it». Воссоздайте эту функцию.
"""

# def biggest_dict(**kwargs):
#     my_dict = {'first_one':'we can do it'}
#     for k, v in kwargs.items():
#         my_dict[k]=v
#     return my_dict

# print(biggest_dict(artur='Artur', syamyk='Syamyk'))


"""
#4
Дана строка в виде случайной последовательности чисел от 0 до 9. 

Требуется создать словарь, который в качестве ключей будет принимать данные числа
(т. е. ключи будут типом int), а в качестве значений – количество этих чисел в имеющейся 
последовательности. Для построения словаря создайте функцию count_it(sequence), 
принимающую строку из цифр. Функция должна возвратить словарь из 3-х самых часто встречаемых чисел.
"""

# def count_it(sequence: str):
#     # При помощи генератора создаем словарь, где ключом выступает уникальный элемент строки, а значением - его частота (вычисляется методом count())
#     num_frequency = {int(item): sequence.count(item) for item in sequence}
#     print(num_frequency)
#     # Сортируем словарь по значениям в порядке возрастания. Для этого методом items() формируем пары “(ключ, значение)” в виде кортежей по всем элементам словаря. Т. к. нужно сортировать по значениям, берем второй элемент кортежей. В результате получим список из кортежей “(ключ, значение)”
#     sorted_num_frequency = sorted(num_frequency.items(), key=lambda element: element[1])
#     print(sorted_num_frequency)
#     # Возвращаем последние 3 элемента списка, т. е. кортежи с самыми большими значениями второй компоненты, которые преобразовываем в словарь
#     return dict(sorted_num_frequency[-3:])


# print(count_it('1111222224446568765'))
# 1234324235
"""
#5
Напишите функцию tpl_sort(), которая сортирует кортеж, состоящий из целых чисел по возрастанию и возвращает его. 
Если хотя бы один элемент не является целым числом, то функция возвращает исходный кортеж.
"""

# def tpl_sort(int_tuple: tuple):
#     if float in int_tuple:
#         return int_tuple
#     else:
#         return sorted(int_tuple)

# print(tpl_sort((1,2,3,4,1,2)))


"""
#6
Функция slicer() на вход принимает кортеж и случайный элемент. Требуется вернуть новый кортеж, начинающийся с первого появления элемента в нем и заканчивающийся вторым его появлением включительно.
Если элемента нет вовсе – вернуть пустой кортеж.
Если элемент встречается только один раз, то вернуть кортеж, который начинается с него и идет до конца исходного.
"""

# def slicer(some_tuple, rand):
#     pass
# (1,3,4,5,)
# (2,1,3,4,5,2,)

"""
#7
Перед студентом стоит задача: на вход функции sieve() поступает список целых чисел. В результате 
выполнения этой функции будет получен кортеж уникальных элементов списка в обратном порядке.
"""

# def sieve(lst):
#     unique_values = set(lst)
#     tupe = reversed(tuple(unique_values))
#     return tuple(tupe)

# print(sieve([1,1,3,4,5,6,6,7]))


"""
#8
Николай знает, что кортежи являются неизменяемыми, но он с этим не готов соглашаться. Ученик решил создать функцию del_from_tuple(), 
которая будет удалять первое появление определенного элемента из кортежа по значению и возвращать кортеж без одного. Попробуйте повторить шедевр не признающего 
авторитеты начинающего программиста. К слову, Николай не всегда 
уверен в наличии элемента в кортеже (в этом случае кортеж вернется функцией в исходном виде).
"""

# def some_func(some_tuple, some_arg):
#     if some_arg not in some_tuple:
#         return some_tuple
#     else:
#         some_lst = list(some_tuple)
#         some_lst.remove(some_arg)
#         return tuple(some_lst)

# print(some_func((1,2,3,4,5,6,7,8,), 10))


"""
#9
На входе функция to_set() получает строку или список чисел. 
Преобразуйте их в множество. На выходе должно получиться множество и его мощность.
"""

# def to_set(arg):
#     return set(arg), len(set(arg))

# print(to_set([1,2,3,4,5,5,6,]))

"""
#10
Функция to_list() принимает неограниченное количество параметров. 
Обработайте их так, чтобы на выходе получить список из этих элементов.
"""

# def to_list(*args):
#     return list(args)

# print(to_list(1,2,3,4,5,6))

"""
#11
Составьте функцию season_events(number_of_month), которая принимает номер месяца вашего рождения и в зависимости от сезона печатает на выходе следующее:
«Вы родились в <НАЗВАНИЕ_МЕСЯЦА>. <ОПИСАНИЕ_СОБЫТИЙ>».

В качестве ОПИСАНИЯ_СОБЫТИЙ будет характеристика сезона: 
- для зимы «За окном падал белый снег»,
- для весны «Птицы пели прекрасные песни»,
- для лета «Солнце светило ярче чем когда-либо»,
- для осени «Урожай был невероятным».

Важно учесть, что пользователи могут ввести любой тип данных в качестве
аргумента (не попадитесь на этом и предупредите о том, что «Требуется ввести реальный номер месяца»).
"""

# str = "Вы родились в {month}. {desc}"

# dict_monthes = {
#     1:"Январь",
#     2:"Февраль",
#     3:"Март",
#     4:"Апрель",
#     5:"Май",
#     6:"Июнь",
#     7:"Июль",
#     8:"Август",
#     9:"Сентябрь",
#     10:"Октябрь",
#     11:"Ноябрь",
#     12:"Декабрь",
# }

# def season_events(number_of_month):
#     if isinstance(number_of_month, int):
#         if number_of_month in (1,2,12):
#             return str.format(month=dict_monthes[number_of_month], desc="За окном падал белый снег")
#         elif number_of_month in (3,4,5):
#             return str.format(month=dict_monthes[number_of_month], desc="Птицы пели прекрасные песни")
#         elif number_of_month in (6,7,8):
#             return str.format(month=dict_monthes[number_of_month], desc="Солнце светило ярче чем когда-либо")
#         elif number_of_month in (9,10,11):
#             return str.format(month=dict_monthes[number_of_month], desc="Урожай был невероятным")
#     else:
#         return "Даун"

# print(season_events(12))


"""

#12
Для идентификации своего круга проверенных лиц будущий тайный агент (ведь все о чем-то мечтают) 
Максим решил пускать на свою страничку в Интернете только тех, чьи никнеймы есть в его секретном списке. 
Он уверен в своих людях (особенно в том, что они по глупости не расскажут никому своё секретное прозвище), 
как и в том, что имена товарищей невозможно подобрать случайно.

К слову, вот этот список: Мавпродош, Лорнектиф, Древерол, Фиригарпиг, Клодобродыч. 
По мере увеличения круга знакомых Максим, естественно, дополнит данный список.

Ваша задача такова: повторите код, который будет спрашивать у пользователя его ник и 
либо пускать на сайт (выведется сообщение «Ты – свой. Приветствую, любезный {НИК_ПОСЕТИТЕЛЯ}!»), 
либо нет (в этом случае будет такой текст: «Тут ничего нет. Еще есть вопросы?». 
Фактически, будущий супергерой решил поиздеваться над теми, кого нет в его удивительном перечне, так как им будет показываться это сообщение постоянно. 
Очень коварный замысел!).

Для проверки прозвищ посетителей используйте встроенную функцию input().
"""

# name_lst = ['Мавпродош', 'Лорнектиф', 'Древерол', 'Фиригарпиг', 'Клодобродыч']

# def check_username(username):
#     if username in name_lst:
#         return f"Ты – свой. Приветствую, любезный {username}!"
#     else:
#         print("Тут ничего нет. Еще есть вопросы?")

# username = input('enter your username: ')

# print(check_username(username=username))
